<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Foundatio</name>
    </assembly>
    <members>
        <member name="T:Foundatio.Force.DeepCloner.DeepClonerExtensions">
            <summary>
            Extensions for object cloning
            </summary>
        </member>
        <member name="M:Foundatio.Force.DeepCloner.DeepClonerExtensions.DeepClone``1(``0)">
            <summary>
            Performs deep (full) copy of object and related graph
            </summary>
        </member>
        <member name="M:Foundatio.Force.DeepCloner.DeepClonerExtensions.DeepCloneTo``2(``0,``1)">
            <summary>
            Performs deep (full) copy of object and related graph to existing object
            </summary>
            <returns>existing filled object</returns>
            <remarks>Method is valid only for classes, classes should be descendants in reality, not in declaration</remarks>
        </member>
        <member name="M:Foundatio.Force.DeepCloner.DeepClonerExtensions.ShallowCloneTo``2(``0,``1)">
            <summary>
            Performs shallow copy of object to existing object
            </summary>
            <returns>existing filled object</returns>
            <remarks>Method is valid only for classes, classes should be descendants in reality, not in declaration</remarks>
        </member>
        <member name="M:Foundatio.Force.DeepCloner.DeepClonerExtensions.ShallowClone``1(``0)">
            <summary>
            Performs shallow (only new object returned, without cloning of dependencies) copy of object
            </summary>
        </member>
        <member name="M:Foundatio.Force.DeepCloner.Helpers.DeepClonerCache.ClearCache">
            <summary>
            This method can be used when we switch between safe / unsafe variants (for testing)
            </summary>
        </member>
        <member name="T:Foundatio.Force.DeepCloner.Helpers.DeepClonerSafeTypes">
            <summary>
            Safe types are types, which can be copied without real cloning. e.g. simple structs or strings (it is immutable)
            </summary>
        </member>
        <member name="M:Foundatio.Force.DeepCloner.Helpers.DeepClonerSafeTypes.IsClassSafe(System.Type)">
            <summary>
            Classes with only safe fields are safe for ShallowClone (if they root objects for copying)
            </summary>
        </member>
        <member name="T:Foundatio.Force.DeepCloner.Helpers.ShallowObjectCloner">
            <summary>
            Internal class but due implementation restriction should be public
            </summary>
        </member>
        <member name="M:Foundatio.Force.DeepCloner.Helpers.ShallowObjectCloner.DoCloneObject(System.Object)">
            <summary>
            Abstract method for real object cloning
            </summary>
        </member>
        <member name="M:Foundatio.Force.DeepCloner.Helpers.ShallowObjectCloner.CloneObject(System.Object)">
            <summary>
            Performs real shallow object clone
            </summary>
        </member>
        <member name="M:Foundatio.Force.DeepCloner.Helpers.ShallowObjectCloner.SwitchTo(System.Boolean)">
            <summary>
            Purpose of this method is testing variants
            </summary>
        </member>
        <member name="M:Foundatio.Utility.EnumExtensions.TryEnumIsDefined(System.Type,System.Object)">
            <summary>
            Will try and parse an enum and it's default type.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns>True if the enum value is defined.</returns>
        </member>
        <member name="T:Foundatio.Utility.DisposableAction">
            <summary>
            A class that will call an <see cref="T:System.Action"/> when Disposed.
            </summary>
        </member>
        <member name="M:Foundatio.Utility.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Foundatio.Utility.DisposableAction"/> class.
            </summary>
            <param name="exitAction">The exit action.</param>
        </member>
        <member name="M:Foundatio.Utility.DisposableAction.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Foundatio.Jobs.IQueueJob`1.ProcessAsync(Foundatio.Queues.IQueueEntry{`0},System.Threading.CancellationToken)">
            <summary>
            Processes a queue entry and returns the result. This method is typically called from RunAsync() 
            but can also be called from a function passing in the queue entry.
            </summary>
        </member>
        <member name="P:Foundatio.Messaging.MessageBusOptionsBase.Topic">
            <summary>
            The topic name
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncAutoResetEvent">
            <summary>
            An async-compatible auto-reset event.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncAutoResetEvent._queue">
            <summary>
            The queue of TCSs that other tasks are awaiting.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncAutoResetEvent._set">
            <summary>
            The current state of the event.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncAutoResetEvent._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncAutoResetEvent._mutex">
            <summary>
            The object used for mutual exclusion.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncAutoResetEvent.#ctor(System.Boolean,Foundatio.AsyncEx.IAsyncWaitQueue{System.Object})">
            <summary>
            Creates an async-compatible auto-reset event.
            </summary>
            <param name="set">Whether the auto-reset event is initially set or unset.</param>
            <param name="queue">The wait queue used to manage waiters. This may be <c>null</c> to use a default (FIFO) queue.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncAutoResetEvent.#ctor(System.Boolean)">
            <summary>
            Creates an async-compatible auto-reset event.
            </summary>
            <param name="set">Whether the auto-reset event is initially set or unset.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncAutoResetEvent.#ctor">
            <summary>
            Creates an async-compatible auto-reset event that is initially unset.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncAutoResetEvent.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous auto-reset event.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncAutoResetEvent.IsSet">
            <summary>
            Whether this event is currently set. This member is seldom used; code using this member has a high possibility of race conditions.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncAutoResetEvent.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately, even if the cancellation token is already signalled. If the wait is canceled, then it will not auto-reset this event.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel this wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncAutoResetEvent.WaitAsync">
            <summary>
            Asynchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncAutoResetEvent.Wait(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately, even if the cancellation token is already signalled. If the wait is canceled, then it will not auto-reset this event. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel this wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncAutoResetEvent.Wait">
            <summary>
            Synchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncAutoResetEvent.Set">
            <summary>
            Sets the event, atomically completing a task returned by <see cref="o:WaitAsync"/>. If the event is already set, this method does nothing.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncConditionVariable">
            <summary>
            An async-compatible condition variable. This type uses Mesa-style semantics (the notifying tasks do not yield).
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncConditionVariable._asyncLock">
            <summary>
            The lock associated with this condition variable.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncConditionVariable._queue">
            <summary>
            The queue of waiting tasks.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncConditionVariable._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncConditionVariable._mutex">
            <summary>
            The object used for mutual exclusion.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncConditionVariable.#ctor(Foundatio.AsyncEx.AsyncLock,Foundatio.AsyncEx.IAsyncWaitQueue{System.Object})">
            <summary>
            Creates an async-compatible condition variable associated with an async-compatible lock.
            </summary>
            <param name="asyncLock">The lock associated with this condition variable.</param>
            <param name="queue">The wait queue used to manage waiters. This may be <c>null</c> to use a default (FIFO) queue.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncConditionVariable.#ctor(Foundatio.AsyncEx.AsyncLock)">
            <summary>
            Creates an async-compatible condition variable associated with an async-compatible lock.
            </summary>
            <param name="asyncLock">The lock associated with this condition variable.</param>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncConditionVariable.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous condition variable.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncConditionVariable.Notify">
            <summary>
            Sends a signal to a single task waiting on this condition variable. The associated lock MUST be held when calling this method, and it will still be held when this method returns.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncConditionVariable.NotifyAll">
            <summary>
            Sends a signal to all tasks waiting on this condition variable. The associated lock MUST be held when calling this method, and it will still be held when this method returns.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncConditionVariable.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for a signal on this condition variable. The associated lock MUST be held when calling this method, and it will still be held when this method returns, even if the method is cancelled.
            </summary>
            <param name="cancellationToken">The cancellation signal used to cancel this wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncConditionVariable.WaitAsync">
            <summary>
            Asynchronously waits for a signal on this condition variable. The associated lock MUST be held when calling this method, and it will still be held when the returned task completes.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncConditionVariable.Wait(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for a signal on this condition variable. This method may block the calling thread. The associated lock MUST be held when calling this method, and it will still be held when this method returns, even if the method is cancelled.
            </summary>
            <param name="cancellationToken">The cancellation signal used to cancel this wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncConditionVariable.Wait">
            <summary>
            Synchronously waits for a signal on this condition variable. This method may block the calling thread. The associated lock MUST be held when calling this method, and it will still be held when this method returns.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncCountdownEvent">
            <summary>
            An async-compatible countdown event.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncCountdownEvent._mre">
            <summary>
            The underlying manual-reset event.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncCountdownEvent._count">
            <summary>
            The remaining count on this event.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.#ctor(System.Int64)">
            <summary>
            Creates an async-compatible countdown event.
            </summary>
            <param name="count">The number of signals this event will need before it becomes set.</param>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncCountdownEvent.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous countdown event.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncCountdownEvent.CurrentCount">
            <summary>
            Gets the current number of remaining signals before this event becomes set. This member is seldom used; code using this member has a high possibility of race conditions.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.WaitAsync">
            <summary>
            Asynchronously waits for the count to reach zero.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for the count to reach zero. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.Wait">
            <summary>
            Synchronously waits for the count to reach zero. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.Wait(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for the count to reach zero. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.ModifyCount(System.Int64,System.Boolean)">
            <summary>
            Attempts to modify the current count by the specified amount.
            </summary>
            <param name="difference">The amount to change the current count.</param>
            <param name="add"><c>true</c> to add to the current count; <c>false</c> to subtract.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.AddCount(System.Int64)">
            <summary>
            Adds the specified value to the current count.
            </summary>
            <param name="addCount">The amount to change the current count.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.AddCount">
            <summary>
            Adds one to the current count.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.Signal(System.Int64)">
            <summary>
            Subtracts the specified value from the current count.
            </summary>
            <param name="signalCount">The amount to change the current count.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncCountdownEvent.Signal">
            <summary>
            Subtracts one from the current count.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncLazyFlags">
            <summary>
            Flags controlling the behavior of <see cref="T:Foundatio.AsyncEx.AsyncLazy`1"/>.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLazyFlags.None">
            <summary>
            No special flags. The factory method is executed on a thread pool thread, and does not retry initialization on failures (failures are cached).
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLazyFlags.ExecuteOnCallingThread">
            <summary>
            Execute the factory method on the calling thread.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLazyFlags.RetryOnFailure">
            <summary>
            If the factory method fails, then re-run the factory method the next time instead of caching the failed task.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncLazy`1">
            <summary>
            Provides support for asynchronous lazy initialization. This type is fully threadsafe.
            </summary>
            <typeparam name="T">The type of object that is being asynchronously initialized.</typeparam>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLazy`1._mutex">
            <summary>
            The synchronization object protecting <c>_instance</c>.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLazy`1._factory">
            <summary>
            The factory method to call.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLazy`1._instance">
            <summary>
            The underlying lazy task.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLazy`1._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},Foundatio.AsyncEx.AsyncLazyFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Foundatio.AsyncEx.AsyncLazy`1"/> class.
            </summary>
            <param name="factory">The asynchronous delegate that is invoked to produce the value when it is needed. May not be <c>null</c>.</param>
            <param name="flags">Flags to influence async lazy semantics.</param>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncLazy`1.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous lazy instance.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncLazy`1.IsStarted">
            <summary>
            Whether the asynchronous factory method has started. This is initially <c>false</c> and becomes <c>true</c> when this instance is awaited or after <see cref="M:Foundatio.AsyncEx.AsyncLazy`1.Start"/> is called.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncLazy`1.Task">
            <summary>
            Starts the asynchronous factory method, if it has not already started, and returns the resulting task.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLazy`1.GetAwaiter">
            <summary>
            Asynchronous infrastructure support. This method permits instances of <see cref="T:Foundatio.AsyncEx.AsyncLazy`1"/> to be await'ed.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLazy`1.ConfigureAwait(System.Boolean)">
            <summary>
            Asynchronous infrastructure support. This method permits instances of <see cref="T:Foundatio.AsyncEx.AsyncLazy`1"/> to be await'ed.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLazy`1.Start">
            <summary>
            Starts the asynchronous initialization, if it has not already started.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncLock">
            <summary>
            A mutual exclusion lock that is compatible with async. Note that this lock is <b>not</b> recursive!
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLock._taken">
            <summary>
            Whether the lock is taken by a task.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLock._queue">
            <summary>
            The queue of TCSs that other tasks are awaiting to acquire the lock.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLock._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncLock._mutex">
            <summary>
            The object used for mutual exclusion.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLock.#ctor">
            <summary>
            Creates a new async-compatible mutual exclusion lock.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLock.#ctor(Foundatio.AsyncEx.IAsyncWaitQueue{System.IDisposable})">
            <summary>
            Creates a new async-compatible mutual exclusion lock using the specified wait queue.
            </summary>
            <param name="queue">The wait queue used to manage waiters. This may be <c>null</c> to use a default (FIFO) queue.</param>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncLock.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous lock.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLock.RequestLockAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously acquires the lock. Returns a disposable that releases the lock when disposed.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLock.LockAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously acquires the lock. Returns a disposable that releases the lock when disposed.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLock.LockAsync">
            <summary>
            Asynchronously acquires the lock. Returns a disposable that releases the lock when disposed.
            </summary>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLock.Lock(System.Threading.CancellationToken)">
            <summary>
            Synchronously acquires the lock. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLock.Lock">
            <summary>
            Synchronously acquires the lock. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLock.ReleaseLock">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncLock.Key">
            <summary>
            The disposable which releases the lock.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncLock.Key.#ctor(Foundatio.AsyncEx.AsyncLock)">
            <summary>
            Creates the key for a lock.
            </summary>
            <param name="asyncLock">The lock to release. May not be <c>null</c>.</param>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncManualResetEvent">
            <summary>
            An async-compatible manual-reset event.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncManualResetEvent._mutex">
            <summary>
            The object used for synchronization.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncManualResetEvent._tcs">
            <summary>
            The current state of the event.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncManualResetEvent._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncManualResetEvent.#ctor(System.Boolean)">
            <summary>
            Creates an async-compatible manual-reset event.
            </summary>
            <param name="set">Whether the manual-reset event is initially set or unset.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncManualResetEvent.#ctor">
            <summary>
            Creates an async-compatible manual-reset event that is initially unset.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncManualResetEvent.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous manual-reset event.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncManualResetEvent.IsSet">
            <summary>
            Whether this event is currently set. This member is seldom used; code using this member has a high possibility of race conditions.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncManualResetEvent.WaitAsync">
            <summary>
            Asynchronously waits for this event to be set.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncManualResetEvent.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for this event to be set or for the wait to be canceled.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncManualResetEvent.Wait">
            <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncManualResetEvent.Wait(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncManualResetEvent.Set">
            <summary>
            Sets the event, atomically completing every task returned by <see cref="O:Nito.AsyncEx.AsyncManualResetEvent.WaitAsync"/>. If the event is already set, this method does nothing.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncManualResetEvent.Reset">
            <summary>
            Resets the event. If the event is already reset, this method does nothing.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncMonitor">
            <summary>
            An async-compatible monitor.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncMonitor._asyncLock">
            <summary>
            The lock.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncMonitor._conditionVariable">
            <summary>
            The condition variable.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.#ctor(Foundatio.AsyncEx.IAsyncWaitQueue{System.IDisposable},Foundatio.AsyncEx.IAsyncWaitQueue{System.Object})">
            <summary>
            Constructs a new monitor.
            </summary>
            <param name="lockQueue">The wait queue used to manage waiters for the lock. This may be <c>null</c> to use a default (FIFO) queue.</param>
            <param name="conditionVariableQueue">The wait queue used to manage waiters for the signal. This may be <c>null</c> to use a default (FIFO) queue.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.#ctor">
            <summary>
            Constructs a new monitor.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncMonitor.Id">
            <summary>
            Gets a semi-unique identifier for this monitor.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.EnterAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously enters the monitor. Returns a disposable that leaves the monitor when disposed.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the enter. If this is already set, then this method will attempt to enter the monitor immediately (succeeding if the monitor is currently available).</param>
            <returns>A disposable that leaves the monitor when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.EnterAsync">
            <summary>
            Asynchronously enters the monitor. Returns a disposable that leaves the monitor when disposed.
            </summary>
            <returns>A disposable that leaves the monitor when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.Enter(System.Threading.CancellationToken)">
            <summary>
            Synchronously enters the monitor. Returns a disposable that leaves the monitor when disposed. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the enter. If this is already set, then this method will attempt to enter the monitor immediately (succeeding if the monitor is currently available).</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.Enter">
            <summary>
            Asynchronously enters the monitor. Returns a disposable that leaves the monitor when disposed. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for a pulse signal on this monitor. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns, even if the method is cancelled. This method internally will leave the monitor while waiting for a notification.
            </summary>
            <param name="cancellationToken">The cancellation signal used to cancel this wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.WaitAsync">
            <summary>
            Asynchronously waits for a pulse signal on this monitor. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns. This method internally will leave the monitor while waiting for a notification.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.Wait(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for a pulse signal on this monitor. This method may block the calling thread. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns, even if the method is cancelled. This method internally will leave the monitor while waiting for a notification.
            </summary>
            <param name="cancellationToken">The cancellation signal used to cancel this wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.Wait">
            <summary>
            Asynchronously waits for a pulse signal on this monitor. This method may block the calling thread. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns. This method internally will leave the monitor while waiting for a notification.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.Pulse">
            <summary>
            Sends a signal to a single task waiting on this monitor. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncMonitor.PulseAll">
            <summary>
            Sends a signal to all tasks waiting on this monitor. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1">
            <summary>
            An async-compatible producer/consumer queue.
            </summary>
            <typeparam name="T">The type of elements contained in the queue.</typeparam>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1._queue">
            <summary>
            The underlying queue.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1._maxCount">
            <summary>
            The maximum number of elements allowed in the queue.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1._mutex">
            <summary>
            The mutual-exclusion lock protecting <c>_queue</c> and <c>_completed</c>.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1._completedOrNotFull">
            <summary>
            A condition variable that is signalled when the queue is not full.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1._completedOrNotEmpty">
            <summary>
            A condition variable that is signalled when the queue is completed or not empty.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1._completed">
            <summary>
            Whether this producer/consumer queue has been marked complete for adding.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates a new async-compatible producer/consumer queue with the specified initial elements and a maximum element count.
            </summary>
            <param name="collection">The initial elements to place in the queue. This may be <c>null</c> to start with an empty collection.</param>
            <param name="maxCount">The maximum element count. This must be greater than zero, and greater than or equal to the number of elements in <paramref name="collection"/>.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new async-compatible producer/consumer queue with the specified initial elements.
            </summary>
            <param name="collection">The initial elements to place in the queue. This may be <c>null</c> to start with an empty collection.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.#ctor(System.Int32)">
            <summary>
            Creates a new async-compatible producer/consumer queue with a maximum element count.
            </summary>
            <param name="maxCount">The maximum element count. This must be greater than zero.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.#ctor">
            <summary>
            Creates a new async-compatible producer/consumer queue.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.Empty">
            <summary>
            Whether the queue is empty. This property assumes that the <c>_mutex</c> is already held.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.Full">
            <summary>
            Whether the queue is full. This property assumes that the <c>_mutex</c> is already held.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.CompleteAdding">
            <summary>
            Marks the producer/consumer queue as complete for adding.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.DoEnqueueAsync(`0,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Enqueues an item to the producer/consumer queue. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding.
            </summary>
            <param name="item">The item to enqueue.</param>
            <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
            <param name="sync">Whether to run this method synchronously.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.EnqueueAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Enqueues an item to the producer/consumer queue. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding.
            </summary>
            <param name="item">The item to enqueue.</param>
            <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
            <exception cref="T:System.InvalidOperationException">The producer/consumer queue has been marked complete for adding.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.EnqueueAsync(`0)">
            <summary>
            Enqueues an item to the producer/consumer queue. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding.
            </summary>
            <param name="item">The item to enqueue.</param>
            <exception cref="T:System.InvalidOperationException">The producer/consumer queue has been marked complete for adding.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.Enqueue(`0,System.Threading.CancellationToken)">
            <summary>
            Enqueues an item to the producer/consumer queue. This method may block the calling thread. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding.
            </summary>
            <param name="item">The item to enqueue.</param>
            <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
            <exception cref="T:System.InvalidOperationException">The producer/consumer queue has been marked complete for adding.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item to the producer/consumer queue. This method may block the calling thread. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding.
            </summary>
            <param name="item">The item to enqueue.</param>
            <exception cref="T:System.InvalidOperationException">The producer/consumer queue has been marked complete for adding.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.DoOutputAvailableAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Waits until an item is available to dequeue. Returns <c>false</c> if the producer/consumer queue has completed adding and there are no more items.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to abort the asynchronous wait.</param>
            <param name="sync">Whether to run this method synchronously.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.OutputAvailableAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits until an item is available to dequeue. Returns <c>false</c> if the producer/consumer queue has completed adding and there are no more items.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to abort the asynchronous wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.OutputAvailableAsync">
            <summary>
            Asynchronously waits until an item is available to dequeue. Returns <c>false</c> if the producer/consumer queue has completed adding and there are no more items.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.OutputAvailable(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits until an item is available to dequeue. Returns <c>false</c> if the producer/consumer queue has completed adding and there are no more items.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to abort the asynchronous wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.OutputAvailable">
            <summary>
            Synchronously waits until an item is available to dequeue. Returns <c>false</c> if the producer/consumer queue has completed adding and there are no more items.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
            <summary>
            Provides a (synchronous) consuming enumerable for items in the producer/consumer queue.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to abort the synchronous enumeration.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.GetConsumingEnumerable">
            <summary>
            Provides a (synchronous) consuming enumerable for items in the producer/consumer queue.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.DoDequeueAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Dequeues an item from the producer/consumer queue. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding and is empty.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
            <param name="sync">Whether to run this method synchronously.</param>
            <exception cref="T:System.InvalidOperationException">The producer/consumer queue has been marked complete for adding and is empty.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
            Dequeues an item from the producer/consumer queue. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding and is empty.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
            <returns>The dequeued item.</returns>
            <exception cref="T:System.InvalidOperationException">The producer/consumer queue has been marked complete for adding and is empty.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.DequeueAsync">
            <summary>
            Dequeues an item from the producer/consumer queue. Returns the dequeued item. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding and is empty.
            </summary>
            <returns>The dequeued item.</returns>
            <exception cref="T:System.InvalidOperationException">The producer/consumer queue has been marked complete for adding and is empty.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.Dequeue(System.Threading.CancellationToken)">
            <summary>
            Dequeues an item from the producer/consumer queue. Returns the dequeued item. This method may block the calling thread. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding and is empty.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
            <returns>The dequeued item.</returns>
            <exception cref="T:System.InvalidOperationException">The producer/consumer queue has been marked complete for adding and is empty.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncProducerConsumerQueue`1.Dequeue">
            <summary>
            Dequeues an item from the producer/consumer queue. Returns the dequeued item. This method may block the calling thread. Throws <see cref="T:System.InvalidOperationException"/> if the producer/consumer queue has completed adding and is empty.
            </summary>
            <returns>The dequeued item.</returns>
            <exception cref="T:System.InvalidOperationException">The producer/consumer queue has been marked complete for adding and is empty.</exception>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncReaderWriterLock">
            <summary>
            A reader/writer lock that is compatible with async. Note that this lock is <b>not</b> recursive!
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncReaderWriterLock._writerQueue">
            <summary>
            The queue of TCSs that other tasks are awaiting to acquire the lock as writers.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncReaderWriterLock._readerQueue">
            <summary>
            The queue of TCSs that other tasks are awaiting to acquire the lock as readers.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncReaderWriterLock._mutex">
            <summary>
            The object used for mutual exclusion.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncReaderWriterLock._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncReaderWriterLock._locksHeld">
            <summary>
            Number of reader locks held; -1 if a writer lock is held; 0 if no locks are held.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.#ctor(Foundatio.AsyncEx.IAsyncWaitQueue{System.IDisposable},Foundatio.AsyncEx.IAsyncWaitQueue{System.IDisposable})">
            <summary>
            Creates a new async-compatible reader/writer lock.
            </summary>
            <param name="writerQueue">The wait queue used to manage waiters for writer locks. This may be <c>null</c> to use a default (FIFO) queue.</param>
            <param name="readerQueue">The wait queue used to manage waiters for reader locks. This may be <c>null</c> to use a default (FIFO) queue.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.#ctor">
            <summary>
            Creates a new async-compatible reader/writer lock.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncReaderWriterLock.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous lock.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReleaseWaitersWhenCanceled(System.Threading.Tasks.Task)">
            <summary>
            Applies a continuation to the task that will call <see cref="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReleaseWaiters"/> if the task is canceled. This method may not be called while holding the sync lock.
            </summary>
            <param name="task">The task to observe for cancellation.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.RequestReaderLockAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously acquires the lock as a reader. Returns a disposable that releases the lock when disposed.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReaderLockAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously acquires the lock as a reader. Returns a disposable that releases the lock when disposed.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReaderLockAsync">
            <summary>
            Asynchronously acquires the lock as a reader. Returns a disposable that releases the lock when disposed.
            </summary>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReaderLock(System.Threading.CancellationToken)">
            <summary>
            Synchronously acquires the lock as a reader. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReaderLock">
            <summary>
            Synchronously acquires the lock as a reader. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.RequestWriterLockAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously acquires the lock as a writer. Returns a disposable that releases the lock when disposed.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.WriterLockAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously acquires the lock as a writer. Returns a disposable that releases the lock when disposed.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.WriterLockAsync">
            <summary>
            Asynchronously acquires the lock as a writer. Returns a disposable that releases the lock when disposed.
            </summary>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.WriterLock(System.Threading.CancellationToken)">
            <summary>
            Synchronously acquires the lock as a writer. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.WriterLock">
            <summary>
            Asynchronously acquires the lock as a writer. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
            <returns>A disposable that releases the lock when disposed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReleaseWaiters">
            <summary>
            Grants lock(s) to waiting tasks. This method assumes the sync lock is already held.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReleaseReaderLock">
            <summary>
            Releases the lock as a reader.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReleaseWriterLock">
            <summary>
            Releases the lock as a writer.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncReaderWriterLock.ReaderKey">
            <summary>
            The disposable which releases the reader lock.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.ReaderKey.#ctor(Foundatio.AsyncEx.AsyncReaderWriterLock)">
            <summary>
            Creates the key for a lock.
            </summary>
            <param name="asyncReaderWriterLock">The lock to release. May not be <c>null</c>.</param>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncReaderWriterLock.WriterKey">
            <summary>
            The disposable which releases the writer lock.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncReaderWriterLock.WriterKey.#ctor(Foundatio.AsyncEx.AsyncReaderWriterLock)">
            <summary>
            Creates the key for a lock.
            </summary>
            <param name="asyncReaderWriterLock">The lock to release. May not be <c>null</c>.</param>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncSemaphore">
            <summary>
            An async-compatible semaphore. Alternatively, you could use <c>SemaphoreSlim</c>.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncSemaphore._queue">
            <summary>
            The queue of TCSs that other tasks are awaiting to acquire the semaphore.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncSemaphore._count">
            <summary>
            The number of waits that will be immediately granted.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncSemaphore._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.AsyncSemaphore._mutex">
            <summary>
            The object used for mutual exclusion.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncSemaphore.#ctor(System.Int64,Foundatio.AsyncEx.IAsyncWaitQueue{System.Object})">
            <summary>
            Creates a new async-compatible semaphore with the specified initial count.
            </summary>
            <param name="initialCount">The initial count for this semaphore. This must be greater than or equal to zero.</param>
            <param name="queue">The wait queue used to manage waiters. This may be <c>null</c> to use a default (FIFO) queue.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncSemaphore.#ctor(System.Int64)">
            <summary>
            Creates a new async-compatible semaphore with the specified initial count.
            </summary>
            <param name="initialCount">The initial count for this semaphore. This must be greater than or equal to zero.</param>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncSemaphore.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous semaphore.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.AsyncSemaphore.CurrentCount">
            <summary>
            Gets the number of slots currently available on this semaphore. This member is seldom used; code using this member has a high possibility of race conditions.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncSemaphore.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for a slot in the semaphore to be available.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this is already set, then this method will attempt to take the slot immediately (succeeding if a slot is currently available).</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncSemaphore.WaitAsync">
            <summary>
            Asynchronously waits for a slot in the semaphore to be available.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncSemaphore.Wait(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for a slot in the semaphore to be available. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this is already set, then this method will attempt to take the slot immediately (succeeding if a slot is currently available).</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncSemaphore.Wait">
            <summary>
            Synchronously waits for a slot in the semaphore to be available. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncSemaphore.Release(System.Int64)">
            <summary>
            Releases the semaphore.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncSemaphore.Release">
            <summary>
            Releases the semaphore.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.IAsyncWaitQueue`1">
            <summary>
            A collection of cancelable <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> instances. Implementations must assume the caller is holding a lock.
            </summary>
            <typeparam name="T">The type of the results. If this isn't needed, use <see cref="T:System.Object"/>.</typeparam>
        </member>
        <member name="P:Foundatio.AsyncEx.IAsyncWaitQueue`1.IsEmpty">
            <summary>
            Gets whether the queue is empty.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.IAsyncWaitQueue`1.Enqueue">
            <summary>
            Creates a new entry and queues it to this wait queue. The returned task must support both synchronous and asynchronous waits.
            </summary>
            <returns>The queued task.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.IAsyncWaitQueue`1.Dequeue(`0)">
            <summary>
            Removes a single entry in the wait queue and completes it. This method may only be called if <see cref="P:Foundatio.AsyncEx.IAsyncWaitQueue`1.IsEmpty"/> is <c>false</c>. The task continuations for the completed task must be executed asynchronously.
            </summary>
            <param name="result">The result used to complete the wait queue entry. If this isn't needed, use <c>default(T)</c>.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.IAsyncWaitQueue`1.DequeueAll(`0)">
            <summary>
            Removes all entries in the wait queue and completes them. The task continuations for the completed tasks must be executed asynchronously.
            </summary>
            <param name="result">The result used to complete the wait queue entries. If this isn't needed, use <c>default(T)</c>.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.IAsyncWaitQueue`1.TryCancel(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Attempts to remove an entry from the wait queue and cancels it. The task continuations for the completed task must be executed asynchronously.
            </summary>
            <param name="task">The task to cancel.</param>
            <param name="cancellationToken">The cancellation token to use to cancel the task.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.IAsyncWaitQueue`1.CancelAll(System.Threading.CancellationToken)">
            <summary>
            Removes all entries from the wait queue and cancels them. The task continuations for the completed tasks must be executed asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token to use to cancel the tasks.</param>
        </member>
        <member name="T:Foundatio.AsyncEx.AsyncWaitQueueExtensions">
            <summary>
            Provides extension methods for wait queues.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AsyncWaitQueueExtensions.Enqueue``1(Foundatio.AsyncEx.IAsyncWaitQueue{``0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates a new entry and queues it to this wait queue. If the cancellation token is already canceled, this method immediately returns a canceled task without modifying the wait queue.
            </summary>
            <param name="this">The wait queue.</param>
            <param name="mutex">A synchronization object taken while cancelling the entry.</param>
            <param name="token">The token used to cancel the wait.</param>
            <returns>The queued task.</returns>
        </member>
        <member name="T:Foundatio.AsyncEx.DefaultAsyncWaitQueue`1">
            <summary>
            The default wait queue implementation, which uses a double-ended queue.
            </summary>
            <typeparam name="T">The type of the results. If this isn't needed, use <see cref="T:System.Object"/>.</typeparam>
        </member>
        <member name="T:Foundatio.AsyncEx.AwaitableDisposable`1">
            <summary>
            An awaitable wrapper around a task whose result is disposable. The wrapper is not disposable, so this prevents usage errors like "using (MyAsync())" when the appropriate usage should be "using (await MyAsync())".
            </summary>
            <typeparam name="T">The type of the result of the underlying task.</typeparam>
        </member>
        <member name="F:Foundatio.AsyncEx.AwaitableDisposable`1._task">
            <summary>
            The underlying task.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AwaitableDisposable`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new awaitable wrapper around the specified task.
            </summary>
            <param name="task">The underlying task to wrap. This may not be <c>null</c>.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AwaitableDisposable`1.AsTask">
            <summary>
            Returns the underlying task.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AwaitableDisposable`1.op_Implicit(Foundatio.AsyncEx.AwaitableDisposable{`0})~System.Threading.Tasks.Task{`0}">
            <summary>
            Implicit conversion to the underlying task.
            </summary>
            <param name="source">The awaitable wrapper.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.AwaitableDisposable`1.GetAwaiter">
            <summary>
            Infrastructure. Returns the task awaiter for the underlying task.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.AwaitableDisposable`1.ConfigureAwait(System.Boolean)">
            <summary>
            Infrastructure. Returns a configured task awaiter for the underlying task.
            </summary>
            <param name="continueOnCapturedContext">Whether to attempt to marshal the continuation back to the captured context.</param>
        </member>
        <member name="T:Foundatio.AsyncEx.IdManager`1">
            <summary>
            Allocates Ids for instances on demand. 0 is an invalid/unassigned Id. Ids may be non-unique in very long-running systems. This is similar to the Id system used by <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.TaskScheduler"/>.
            </summary>
            <typeparam name="TTag">The type for which ids are generated.</typeparam>
        </member>
        <member name="F:Foundatio.AsyncEx.IdManager`1._lastId">
            <summary>
            The last id generated for this type. This is 0 if no ids have been generated.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.IdManager`1.GetId(System.Int32@)">
            <summary>
            Returns the id, allocating it if necessary.
            </summary>
            <param name="id">A reference to the field containing the id.</param>
        </member>
        <member name="T:Foundatio.AsyncEx.PauseTokenSource">
            <summary>
            The source (controller) of a "pause token", which can be used to cooperatively pause and unpause operations.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.PauseTokenSource._mre">
            <summary>
            The MRE that manages the "pause" logic. When the MRE is set, the token is not paused; when the MRE is not set, the token is paused.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.PauseTokenSource.IsPaused">
            <summary>
            Whether or not this source (and its tokens) are in the paused state. This member is seldom used; code using this member has a high possibility of race conditions.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.PauseTokenSource.Token">
            <summary>
            Gets a pause token controlled by this source.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.PauseToken">
            <summary>
            A type that allows an operation to be cooperatively paused.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.PauseToken._mre">
            <summary>
            The MRE that manages the "pause" logic, or <c>null</c> if this token can never be paused. When the MRE is set, the token is not paused; when the MRE is not set, the token is paused.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.PauseToken.CanBePaused">
            <summary>
            Whether this token can ever possibly be paused.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.PauseToken.IsPaused">
            <summary>
            Whether or not this token is in the paused state.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.PauseToken.WaitWhilePausedAsync">
            <summary>
            Asynchronously waits until the pause token is not paused.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.PauseToken.WaitWhilePausedAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits until the pause token is not paused, or until this wait is canceled by the cancellation token.
            </summary>
            <param name="token">The cancellation token to observe. If the token is already canceled, this method will first check if the pause token is unpaused, and will return without an exception in that case.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.PauseToken.WaitWhilePaused">
            <summary>
            Synchronously waits until the pause token is not paused.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.PauseToken.WaitWhilePaused(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits until the pause token is not paused, or until this wait is canceled by the cancellation token.
            </summary>
            <param name="token">The cancellation token to observe. If the token is already canceled, this method will first check if the pause token is unpaused, and will return without an exception in that case.</param>
        </member>
        <member name="T:Foundatio.AsyncEx.CancellationTokenTaskSource`1">
            <summary>
            Holds the task for a cancellation token, as well as the token registration. The registration is disposed when this instance is disposed.
            </summary>
        </member>
        <member name="F:Foundatio.AsyncEx.CancellationTokenTaskSource`1._registration">
            <summary>
            The cancellation token registration, if any. This is <c>null</c> if the registration was not necessary.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.CancellationTokenTaskSource`1.#ctor(System.Threading.CancellationToken)">
            <summary>
            Creates a task for the specified cancellation token, registering with the token if necessary.
            </summary>
            <param name="cancellationToken">The cancellation token to observe.</param>
        </member>
        <member name="P:Foundatio.AsyncEx.CancellationTokenTaskSource`1.Task">
            <summary>
            Gets the task for the source cancellation token.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.CancellationTokenTaskSource`1.Dispose">
            <summary>
            Disposes the cancellation token registration, if any. Note that this may cause <see cref="P:Foundatio.AsyncEx.CancellationTokenTaskSource`1.Task"/> to never complete.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.Synchronous.TaskExtensions">
            <summary>
            Provides synchronous extension methods for tasks.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed, or the <paramref name="task"/> raised an <see cref="T:System.OperationCanceledException"/>.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns>The result of the task.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <returns>The result of the task.</returns>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed, or the <paramref name="task"/> raised an <see cref="T:System.OperationCanceledException"/>.</exception>
        </member>
        <member name="M:Foundatio.AsyncEx.Synchronous.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.Synchronous.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was cancelled before the <paramref name="task"/> completed.</exception>
        </member>
        <member name="T:Foundatio.AsyncEx.TaskCompletionSourceExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``2(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``1})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="task"/>.
            </summary>
            <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
            <typeparam name="TSourceResult">The type of the result of the source asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task,System.Func{``0})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="task"/> but using the result value from <paramref name="resultFunc"/> if the task completed successfully.
            </summary>
            <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <param name="resultFunc">A delegate that returns the result with which to complete the task completion source, if the task completed successfully.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskCompletionSourceExtensions.CreateAsyncTaskSource``1">
            <summary>
            Creates a new TCS for use with async code, and which forces its continuations to execute asynchronously.
            </summary>
            <typeparam name="TResult">The type of the result of the TCS.</typeparam>
        </member>
        <member name="T:Foundatio.AsyncEx.TaskConstants">
            <summary>
            Provides completed task constants.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.TaskConstants.BooleanTrue">
            <summary>
            A task that has been completed with the value <c>true</c>.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.TaskConstants.BooleanFalse">
            <summary>
            A task that has been completed with the value <c>false</c>.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.TaskConstants.Int32Zero">
            <summary>
            A task that has been completed with the value <c>0</c>.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.TaskConstants.Int32NegativeOne">
            <summary>
            A task that has been completed with the value <c>-1</c>.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.TaskConstants.Completed">
            <summary>
            A <see cref="T:System.Threading.Tasks.Task"/> that has been completed.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.TaskConstants.Canceled">
            <summary>
            A task that has been canceled.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.TaskConstants`1">
            <summary>
            Provides completed task constants.
            </summary>
            <typeparam name="T">The type of the task result.</typeparam>
        </member>
        <member name="P:Foundatio.AsyncEx.TaskConstants`1.Default">
            <summary>
            A task that has been completed with the default value of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:Foundatio.AsyncEx.TaskConstants`1.Canceled">
            <summary>
            A task that has been canceled.
            </summary>
        </member>
        <member name="T:Foundatio.AsyncEx.TaskExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/> types.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskExtensions.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for the task to complete, or for the cancellation token to be canceled.
            </summary>
            <param name="this">The task to wait for.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskExtensions.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for any of the source tasks to complete, or for the cancellation token to be canceled.
            </summary>
            <param name="this">The tasks to wait for.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskExtensions.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Asynchronously waits for any of the source tasks to complete.
            </summary>
            <param name="this">The tasks to wait for.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskExtensions.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Asynchronously waits for all of the source tasks to complete.
            </summary>
            <param name="this">The tasks to wait for.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskExtensions.WaitAsync``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for the task to complete, or for the cancellation token to be canceled.
            </summary>
            <typeparam name="TResult">The type of the task result.</typeparam>
            <param name="this">The task to wait for.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskExtensions.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for any of the source tasks to complete, or for the cancellation token to be canceled.
            </summary>
            <typeparam name="TResult">The type of the task results.</typeparam>
            <param name="this">The tasks to wait for.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskExtensions.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously waits for any of the source tasks to complete.
            </summary>
            <typeparam name="TResult">The type of the task results.</typeparam>
            <param name="this">The tasks to wait for.</param>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskExtensions.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously waits for all of the source tasks to complete.
            </summary>
            <typeparam name="TResult">The type of the task results.</typeparam>
            <param name="this">The tasks to wait for.</param>
        </member>
        <member name="T:Foundatio.AsyncEx.TaskFactoryExtensions">
            <summary>
            Provides extension methods for task factories.
            </summary>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskFactoryExtensions.Run(System.Threading.Tasks.TaskFactory,System.Action)">
            <summary>
            Queues work to the task factory and returns a <see cref="T:System.Threading.Tasks.Task"/> representing that work. If the task factory does not specify a task scheduler, the thread pool task scheduler is used.
            </summary>
            <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory"/>. May not be <c>null</c>.</param>
            <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskFactoryExtensions.Run``1(System.Threading.Tasks.TaskFactory,System.Func{``0})">
            <summary>
            Queues work to the task factory and returns a <see cref="T:System.Threading.Tasks.Task`1"/> representing that work. If the task factory does not specify a task scheduler, the thread pool task scheduler is used.
            </summary>
            <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory"/>. May not be <c>null</c>.</param>
            <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskFactoryExtensions.Run(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Queues work to the task factory and returns a proxy <see cref="T:System.Threading.Tasks.Task"/> representing that work. If the task factory does not specify a task scheduler, the thread pool task scheduler is used.
            </summary>
            <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory"/>. May not be <c>null</c>.</param>
            <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:Foundatio.AsyncEx.TaskFactoryExtensions.Run``1(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Queues work to the task factory and returns a proxy <see cref="T:System.Threading.Tasks.Task`1"/> representing that work. If the task factory does not specify a task scheduler, the thread pool task scheduler is used.
            </summary>
            <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory"/>. May not be <c>null</c>.</param>
            <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
            <returns>The started task.</returns>
        </member>
        <member name="T:Foundatio.Collections.Deque`1">
            <summary>
            A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="F:Foundatio.Collections.Deque`1.DefaultCapacity">
            <summary>
            The default capacity.
            </summary>
        </member>
        <member name="F:Foundatio.Collections.Deque`1._buffer">
            <summary>
            The circular _buffer that holds the view.
            </summary>
        </member>
        <member name="F:Foundatio.Collections.Deque`1._offset">
            <summary>
            The offset into <see cref="F:Foundatio.Collections.Deque`1._buffer"/> where the view begins.
            </summary>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Foundatio.Collections.Deque`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity. Must be greater than <c>0</c>.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Foundatio.Collections.Deque`1"/> class with the elements from the specified collection.
            </summary>
            <param name="collection">The collection. May not be <c>null</c>.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Foundatio.Collections.Deque`1"/> class.
            </summary>
        </member>
        <member name="P:Foundatio.Collections.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Foundatio.Collections.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in this list.</exception>
            <exception cref="T:System.NotSupportedException">This property is set and the list is read-only.</exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in this list.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>The index of <paramref name="item"/> if found in this list; otherwise, -1.</returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the end of this list.
            </summary>
            <param name="item">The object to add to this list.</param>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether this list contains a specific value.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
            true if <paramref name="item"/> is found in this list; otherwise, false.
            </returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this list to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this slice. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.CopyToArray(System.Array,System.Int32)">
            <summary>
            Copies the deque elemens into an array. The resulting array always has all the deque elements contiguously.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The optional index in the destination array at which to begin writing.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
            <param name="item">The object to remove from this list.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from this list; otherwise, false. This method also returns false if <paramref name="item"/> is not found in this list.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.CheckNewIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.CheckExistingIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to an existing element in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an existing element for the source.</exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="offset"/> and <paramref name="count"/> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="offset">The index into source at which the range begins.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
        </member>
        <member name="P:Foundatio.Collections.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Foundatio.Collections.Deque`1.IsFull">
            <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:Foundatio.Collections.Deque`1.IsSplit">
            <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Foundatio.Collections.Deque`1._buffer"/> than the end).
            </summary>
        </member>
        <member name="P:Foundatio.Collections.Deque`1.Capacity">
            <summary>
            Gets or sets the capacity for this deque. This value must always be greater than zero, and this property cannot be set to a value less than <see cref="P:Foundatio.Collections.Deque`1.Count"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>Capacity</c> cannot be set to a value less than <see cref="P:Foundatio.Collections.Deque`1.Count"/>.</exception>
        </member>
        <member name="P:Foundatio.Collections.Deque`1.Count">
            <summary>
            Gets the number of elements contained in this deque.
            </summary>
            <returns>The number of elements contained in this deque.</returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DequeIndexToBufferIndex(System.Int32)">
            <summary>
            Applies the offset to <paramref name="index"/>, resulting in a buffer index.
            </summary>
            <param name="index">The deque index.</param>
            <returns>The buffer index.</returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.PostIncrement(System.Int32)">
            <summary>
            Increments <see cref="F:Foundatio.Collections.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:Foundatio.Collections.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:Foundatio.Collections.Deque`1._offset"/>. May not be negative.</param>
            <returns>The value of <see cref="F:Foundatio.Collections.Deque`1._offset"/> after it was incremented.</returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.PreDecrement(System.Int32)">
            <summary>
            Decrements <see cref="F:Foundatio.Collections.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:Foundatio.Collections.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to reduce <see cref="F:Foundatio.Collections.Deque`1._offset"/>. May not be negative or greater than <see cref="P:Foundatio.Collections.Deque`1.Capacity"/>.</param>
            <returns>The value of <see cref="F:Foundatio.Collections.Deque`1._offset"/> before it was decremented.</returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoAddToBack(`0)">
            <summary>
            Inserts a single element to the back of the view. <see cref="P:Foundatio.Collections.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoAddToFront(`0)">
            <summary>
            Inserts a single element to the front of the view. <see cref="P:Foundatio.Collections.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoRemoveFromBack">
            <summary>
            Removes and returns the last element in the view. <see cref="P:Foundatio.Collections.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoRemoveFromFront">
            <summary>
            Removes and returns the first element in the view. <see cref="P:Foundatio.Collections.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former first element.</returns>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Inserts a range of elements into the view.
            </summary>
            <param name="index">The index into the view at which the elements are to be inserted.</param>
            <param name="collection">The elements to insert. The sum of <c>collection.Count</c> and <see cref="P:Foundatio.Collections.Deque`1.Count"/> must be less than or equal to <see cref="P:Foundatio.Collections.Deque`1.Capacity"/>.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the view.
            </summary>
            <param name="index">The index into the view at which the range begins.</param>
            <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:Foundatio.Collections.Deque`1.Count"/>.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.EnsureCapacityForOneElement">
            <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:Foundatio.Collections.Deque`1.IsFull"/> is false.
            </summary>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.AddToBack(`0)">
            <summary>
            Inserts a single element at the back of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.AddToFront(`0)">
            <summary>
            Inserts a single element at the front of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of elements into this deque.
            </summary>
            <param name="index">The index at which the collection is inserted.</param>
            <param name="collection">The collection of elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from this deque.
            </summary>
            <param name="offset">The index into the deque at which the range begins.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [<paramref name="offset"/>, <paramref name="offset"/> + <paramref name="count"/>) is not within the range [0, <see cref="P:Foundatio.Collections.Deque`1.Count"/>).</exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.RemoveFromBack">
            <summary>
            Removes and returns the last element of this deque.
            </summary>
            <returns>The former last element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.RemoveFromFront">
            <summary>
            Removes and returns the first element of this deque.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.Clear">
            <summary>
            Removes all items from this deque.
            </summary>
        </member>
        <member name="M:Foundatio.Collections.Deque`1.ToArray">
            <summary>
            Creates and returns a new array containing the elements in this deque.
            </summary>
        </member>
        <member name="T:Foundatio.Disposables.SingleDisposable`1">
            <summary>
            A base class for disposables that need exactly-once semantics in a threadsafe way.
            </summary>
            <typeparam name="T">The type of "context" for the derived disposable.</typeparam>
        </member>
        <member name="F:Foundatio.Disposables.SingleDisposable`1._context">
            <summary>
            The context. This may be <c>null</c>.
            </summary>
        </member>
        <member name="M:Foundatio.Disposables.SingleDisposable`1.#ctor(`0)">
            <summary>
            Creates a disposable for the specified context.
            </summary>
            <param name="context">The context passed to <see cref="M:Foundatio.Disposables.SingleDisposable`1.Dispose(`0)"/>. If this is <c>null</c>, then <see cref="M:Foundatio.Disposables.SingleDisposable`1.Dispose(`0)"/> will never be called.</param>
        </member>
        <member name="M:Foundatio.Disposables.SingleDisposable`1.Dispose(`0)">
            <summary>
            The actul disposal method, called only once from <see cref="M:Foundatio.Disposables.SingleDisposable`1.Dispose"/>. If the context passed to the constructor of this instance is <c>null</c>, then this method is never called.
            </summary>
            <param name="context">The context for the disposal operation. This is never <c>null</c>.</param>
        </member>
        <member name="M:Foundatio.Disposables.SingleDisposable`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Foundatio.Queues.IQueue`1.StartWorkingAsync(System.Func{Foundatio.Queues.IQueueEntry{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Asynchronously dequeues entries in the background.
            </summary>
            <param name="handler">
                Function called on entry dequeued.
            </param>
            <param name="autoComplete">
                True to call <see cref="M:Foundatio.Queues.IQueue`1.CompleteAsync(Foundatio.Queues.IQueueEntry{`0})"/> after the <paramref name="handler"/> is run,
                defaults to false.
            </param>
            <param name="cancellationToken">
                The token used to cancel the background worker.
            </param>
        </member>
        <member name="P:Foundatio.Storage.FileSpec.Size">
            <summary>
            In Bytes
            </summary>
        </member>
        <member name="M:ExceptionHelpers.PrepareForRethrow(System.Exception)">
            <summary>
            Attempts to prepare the exception for re-throwing by preserving the stack trace. The returned exception should be immediately thrown.
            </summary>
            <param name="exception">The exception. May not be <c>null</c>.</param>
            <returns>The <see cref="T:System.Exception"/> that was passed into this method.</returns>
        </member>
    </members>
</doc>
